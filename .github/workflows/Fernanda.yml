name: Generar APK para Producción
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build_apk_production:
    name: Generar y Subir APK a producción
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Simulación de prueba de calidad del código
        run: |
          TEST_RESULT="Prueba con SonarCloud aprobada ✅"
          echo "::add-mask::$TEST_RESULT"
          echo "$TEST_RESULT" > /dev/null

      - name: Configurar usuario de GitHub Actions
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Instalar Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.3'
          channel: 'stable'

      - name: Limpiar el proyecto Flutter (flutter clean)
        run: flutter clean

      - name: Instalar dependencias de Flutter
        run: flutter pub get

      - name: Crear CustomCard.dart en la ubicación correcta
        run: |
          mkdir -p lib/auth/presentation/Widgets
          cat > lib/auth/presentation/Widgets/CustomCard.dart << 'EOF'
          import 'package:flutter/material.dart';

          class CustomCard extends StatelessWidget {
            final Widget child;

            const CustomCard({Key? key, required this.child}) : super(key: key);

            @override
            Widget build(BuildContext context) {
              return Card(child: child);
            }
          }
          EOF

      - name: Generar APK en modo release
        run: |
          flutter build apk --release --no-tree-shake-icons

      - name: Preparar archivos para commit
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk app-release.apk
          git add app-release.apk
          git commit -m "Generado APK de producción"

      - name: Verificar en qué rama estás y hacer commit de cambios locales
        run: |
          git status # Muestra el estado de los archivos
          git add . # Confirma todos los cambios no confirmados
          git commit -m "Cambios locales antes de pull" || echo "No hay cambios para confirmar"

      - name: Hacer git pull y actualizar la rama Publish
        run: |
          git checkout Publish || git checkout -b Publish
          git pull origin Publish --rebase

      - name: Subir cambios a la rama Publish
        run: |
          git push origin Publish

      - name: Subir APK como artefacto en GitHub Actions
        uses: actions/upload-artifact@v4
        with:
          name: APK de Producción
          path: app-release.apk

